variables:
  NODE_VERSION: 18

.cache:
  variables:
    PATH_NODE_MODULES: src/node_modules/
    PATH_NPMRC: src/.npmrc
    PATH_SRC: src

include:
  - project: common/templates/ci-microservices
    ref: 1.7.1
    file:
      - library-ci.yaml

stages:
  - build
  - test
  - release
  - deploy

install:
  script:
    - cd $PATH_SRC/ && yarn install

# Job to get JIRA tickets of the release
get-jira-tickets:
  stage: release
  image: node:latest
  needs:
    - test-jest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      node <<EOF
      (async () => {
        try {
          const gitlabResponse = await fetch("${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests?state=merged&target_branch=develop&milestone=${CI_COMMIT_TAG}", {
            method: "GET",
            headers: {
              "Private-Token": "$GITLAB_API_TOKEN"
            }
          });

          if (!gitlabResponse.ok) {
            const err = await gitlabResponse.json();
            throw new Error("Failed to send GitLab request: " + JSON.stringify(err));
          }

          const mergeRequests = await gitlabResponse.json();
          let tickets = [];

          mergeRequests.forEach((mr) => {
            const matches = mr.source_branch.match(/EC-\d+/i);
            if(matches?.length) {
              tickets.push(matches[0].toUpperCase());
            }
          });

          tickets = [...new Set(tickets)];

          console.log("tickets", tickets);

          const payload = {
            "event_type": "trigger-artifact-workflow",
            "client_payload": {
              "tickets": tickets
            }
          };

          console.log("payload", JSON.stringify(payload));

          const githubResponse = await fetch("https://api.github.com/repos/${GITHUB_ORGANIZATION}/${GITHUB_PROJECT}/dispatches", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": "Bearer ${GITHUB_TOKEN}",
              "User-Agent": "Node.js"
            },
            body: JSON.stringify(payload)
          });

          if (!githubResponse.ok) {
            const err = await githubResponse.json();
            throw new Error("Failed to send GitHub event: " + JSON.stringify(err));
          }
        } catch (error) {
          throw new Error("Request error: " + error.message);
        }
      })();
      EOF

# Release note job
release-job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - get-jira-tickets
  variables:
    TEMP_CHANGELOG_FILE: 'release_changelog.txt'
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      # Extract changelog part according to tag version
      CHANGELOG=$(awk -v version="## $CI_COMMIT_TAG" '
        $0 ~ version {printit=1; next}
        printit && /^## / {exit}
        printit {print}
      ' CHANGELOG.md)

      {
        echo "# CHANGE LOG"
        echo "$CHANGELOG"
      } > "$TEMP_CHANGELOG_FILE"
    - cat "$TEMP_CHANGELOG_FILE"
  release:
    tag_name: $CI_COMMIT_TAG
    name: Version $CI_COMMIT_TAG
    description: '$TEMP_CHANGELOG_FILE'
    milestones:
      - $CI_COMMIT_TAG

.npm-publish-template:
  needs: [install]
  before_script:
    - cp *.md $PATH_SRC/
  script:
    - cd $PATH_SRC/
    - echo $PKG_VERSION
    - echo $PKG_TAG
    - npm --no-git-tag-version --allow-same-version version $PKG_VERSION
    - npm publish --access public --tag $PKG_TAG
